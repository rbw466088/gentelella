<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"> 
    
    <!-- 引入properties文件 -->
    <bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="location">
    		<value>classpath:jdbc.properties</value>
    	</property>
    </bean>
    <!-- 定义数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
    	<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置需要加载的mapper文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mapper/**/*.xml</value>
			</list>
		</property>
		<!-- 给指定包配置别名 -->
		<property name="typeAliasesPackage" value="com.yang.school.entity" />
	</bean>
	<!-- 配置SqlSessionTemplate工具类（第一种方法） -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"  ref="sqlSessionFactory"/>
	</bean>
	<!-- 第一种方法和第二种方法通用，具体看property配置 -->
	<!-- <bean id="testDaoOne" class="com.yang.school.dao.impl.ClassInfoMapperImpl"> -->
		<!-- 用SqlSessionTemplate工具类把mapper.xml文件注入接口实现类的SqlSessionTemplate对象中（setter）   -->
		<!-- <property name="template" ref="sqlSessionFactory" /> --><!-- （第一种方法） -->
		<!-- <property name="sqlSessionFactory"  ref="sqlSessionFactory"/> --><!-- （第二种方法） -->
	<!-- </bean> -->

	<!-- 不需要配置实现类的配置方式（第三种方法）  -->
	<!-- 用接口实现类继承SqlSessionDaoSupport类，把mapper.xml文件注入MapperFactoryBean对象mapperInterface中（setter） -->
<!--  	<bean id="testDaoTwo" class="org.mybatis.spring.mapper.MapperFactoryBean"> -->
 		<!-- name是 MapperFactoryBean的对象（mapperInterface）的setter方法-->
 		<!-- value是接口全路径 -->
<!--  		<property name="mapperInterface" value="com.yang.school.dao.ClassInfoMapper" />
 		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
 	</bean> -->
    
    <!-- （第四种方法）整个包注入，不用一个个配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    	<property name="basePackage" value="com.yang.school.dao" />
    </bean>
    
    <!-- biz实现类测试 -->
    <bean id="testService" class="com.yang.school.service.test.impl.TestServiceImpl">
    	<!-- ref如果是两个大写字母开头就保持原样，如果是一个大写字母开头就第一个字母小写：classInfoMapper -->
		<property name="classInfo" ref="classInfoMapper"/>
	</bean>
    
    <bean id="classInfo" class="com.yang.school.service.test.impl.TestServiceImpl">
    	<!-- ref如果是两个大写字母开头就保持原样，如果是一个大写字母开头就第一个字母小写：classInfoMapper -->
		<property name="classInfo" ref="classInfoMapper"/>
	</bean>
    
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 指定事务管理器设置事务属性 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
    	<!-- 定义属性，声明事务规则 -->
    	<tx:attributes>
		   	<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="show*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
    </tx:advice>
    <!-- 定义一个切面用来事务控制 -->
    <aop:config>
    	<!-- 定义切入点 -->
    	<aop:pointcut id="serviceMethod" expression="execution(* com.yang.school.service..*.*(..))" />
    	<!-- 将事务增强与切入点组合 -->
    	<aop:advisor advice-ref="txadvice" pointcut-ref="serviceMethod" />
    </aop:config>

    
    
    
    
    
</beans>